unit clThServer;

interface

uses
  Windows, SysUtils, Graphics, Variants, Classes, Messages, comobj,
  Dialogs, IdBaseComponent, IdComponent, IdCustomTCPServer,
  IdTCPServer, IdContext, IdThread, IdGlobal, IdExceptionCore, IdSocketHandle,
	clLogAcceptor1, ActiveX, IniFiles, JPEG;

type
  TOnReceiveFile = procedure(Sender : TObject ; Img : TJPEGImage) of object;

type
  TThServer = class(TThread)
  private
    fServer	: TIdTCPServer;
    fTag    : Integer;
    fLog		: TLogAcceptor;
    fIni    : TIniFile;
    fMemStream : TMemoryStream;
    fBMP : TBitmap;
    fJPG : TJPEGImage;
    fLastStatus : TIdStatus;
    fCurrStatus : TIdStatus;
    fPort : Integer;

    fOnReceiveFile : TOnReceiveFile;

    procedure OnServerStatus						(ASender: TObject; const AStatus: TIdStatus;const AStatusText: string);
    procedure OnServerListenException		(AThread: TIdListenerThread; AException: Exception);
    procedure OnServerExecute						(AContext: TIdContext);
    procedure OnServerException					(AContext: TIdContext; AException: Exception);
    procedure OnServerDisconnect				(AContext: TIdContext);
    procedure OnServerConnect						(AContext: TIdContext);
    procedure OnServerBeforeListenerRun	(AThread: TIdThread);
    procedure OnServerBeforeBind        (AHandle: TIdSocketHandle);
    procedure OnServerAfterBind					(Sender: TObject);



    procedure SetName;
  protected
    procedure Execute; override;
  public
      Constructor Create(Tag : Integer; CreateSuspended : boolean ; IsLog : boolean ; Name : String ; Dir : String);
      Destructor 	Destroy ; override;
      procedure 	Terminate ;

      property Tag : Integer read fTag write fTag;
      property  LastStatus : TIdStatus read fLastStatus write fLastStatus;
      property  CurrStatus : TIdStatus read fCurrStatus write fCurrStatus;
      property Port : Integer read fPort write fPort;

      property OnReceiveFile : TOnReceiveFile read fOnReceiveFile write fOnReceiveFile;
  end;

implementation

{ Important: Methods and properties of objects in visual components can only be
  used in a method called using Synchronize, for example,

      Synchronize(UpdateCaption);

  and UpdateCaption could look like,

    procedure TThServer.UpdateCaption;
    begin
      Form1.Caption := 'Updated in a thread';
    end; }

{$IFDEF MSWINDOWS}
type
  TThreadNameInfo = record
    FType: LongWord;     // must be 0x1000
    FName: PAnsiChar;    // pointer to name (in user address space)
    FThreadID: LongWord; // thread ID (-1 indicates caller thread)
    FFlags: LongWord;    // reserved for future use, must be zero
  end;
{$ENDIF}

{ TThServer }

procedure TThServer.OnServerAfterBind(Sender: TObject);
begin
  if Assigned(fLog) then fLog.Write('On Server After Bind');
end;

procedure TThServer.OnServerBeforeBind(AHandle: TIdSocketHandle);
begin
if Assigned(fLog) then fLog.Write('Before Bind ');
end;

procedure TThServer.OnServerBeforeListenerRun(AThread: TIdThread);
begin
if Assigned(fLog) then fLog.Write('OnServerBeforeListenerRun');
end;

procedure TThServer.OnServerConnect(AContext: TIdContext);
begin
if Assigned(fLog) then fLog.Write('Connect. ' + AContext.Connection.Socket.Binding.PeerIP + '. ' + IntToStr(AContext.Connection.Socket.Binding.Port));
end;

procedure TThServer.OnServerDisconnect(AContext: TIdContext);
begin
if Assigned(fLog) then fLog.Write('DisConnect. ' + AContext.Connection.Socket.Binding.PeerIP + '. ' + IntToStr(AContext.Connection.Socket.Binding.Port));
end;

procedure TThServer.OnServerException(AContext: TIdContext;
  AException: Exception);
begin
if Assigned(fLog) then fLog.Write('Exception. ' + AContext.Connection.Socket.Binding.PeerIP + '. ' + IntToStr(AContext.Connection.Socket.Binding.Port));
end;

procedure TThServer.OnServerExecute(AContext: TIdContext);
var
tmpStr : String;
Size : Int64;
begin

// if Assigned(fLog) then fLog.Write('OnServer Execute');
if not AContext.Connection.Socket.ClosedGracefully then
begin
	try
//		tmpStr := AContext.Connection.Socket.ReadLn;
  try
    Size := AContext.Connection.Socket.ReadInt64(true);
    fMemStream.Size := Size;
  except
    on E : Exception do
        begin
          if Assigned(fLog) then fLog.Write('Except read SIZE. ' + E.Message  + E.ClassName);
        end;
  end;
if Assigned(fLog) then fLog.Write('size - ' + IntToStr(Size));
  fMemStream.Position := 0;
  try
    AContext.Connection.Socket.ReadStream(fMemStream,Size,false);
  except
    on E : Exception do
        begin
          if Assigned(fLog) then fLog.Write('Except read STREAM. ' + E.Message  + E.ClassName);
        end;
  end;
if Assigned(fLog) then fLog.Write('after memstream read');
  fMemStream.Position := 0;
  try
    fJPG.LoadFromStream(fMemStream);
  except
    on E : EJPEG do
      begin
        if Assigned(fLog) then fLog.Write('EJPEG Load JPEG from stream. ' + E.Message  + E.ClassName);
      end;
    on E : Exception do
      begin
        if Assigned(fLog) then fLog.Write('Except load from STREAM. ' + E.Message  + E.ClassName);
      end;

  end;
if Assigned(fLog) then fLog.Write('after JPG load from stream');
  fOnReceiveFile(self , fJPG);
//if Assigned(fLog) then fLog.Write('after save to file');

  except
    on E : EIdConnectTimeout do
      begin
//      if Assigned(fLog) then fLog.Write('TIMEOUT at Readln operation');
        AContext.Connection.Socket.Binding.CloseSocket;
        exit;
      end;
    on E : Exception do
      begin
//      if Assigned(fLog) then fLog.Write('Except at Readln operation. ' + E.Message + '. ' + E.ClassNAme);
        AContext.Connection.Socket.Binding.CloseSocket;
	      exit;
      end;
  end;
//  if Assigned(fLog) then fLog.Write('Read String - ' + tmpStr );

end;
end;

procedure TThServer.OnServerListenException(AThread: TIdListenerThread;
  AException: Exception);
begin
if Assigned(fLog) then fLog.Write('Listen Exception. ');
end;

procedure TThServer.OnServerStatus(ASender: TObject; const AStatus: TIdStatus;
  const AStatusText: string);
begin
if Assigned(fLog) then fLog.Write('Status ' + AStatusText);
  fLastStatus := fCurrStatus;
  fCurrStatus := AStatus;
end;

procedure TThServer.SetName;
{$IFDEF MSWINDOWS}
var
  ThreadNameInfo: TThreadNameInfo;
{$ENDIF}
begin
{$IFDEF MSWINDOWS}
  ThreadNameInfo.FType := $1000;
  ThreadNameInfo.FName := 'ServerSocket';
  ThreadNameInfo.FThreadID := $FFFFFFFF;
  ThreadNameInfo.FFlags := 0;

  try
    RaiseException( $406D1388, 0, sizeof(ThreadNameInfo) div sizeof(LongWord), @ThreadNameInfo );
  except
  end;
{$ENDIF}
end;

constructor TThServer.Create(Tag : Integer ; CreateSuspended, IsLog: boolean; Name,
  Dir: String);
begin
  inherited Create(CreateSuspended);
  fTag := Tag;
  if IsLog then fLog := TLogAcceptor.Create('ThServer Socket_' + IntToStr(Tag) , '');
  if Assigned(fLog) then fLog.Write('Thread server created');
  fServer := TIdTCPServer.Create(nil);
  fServer.OnExecute            := OnServerExecute            ;
  fServer.OnAfterBind          := OnServerAfterBind          ;
  fServer.OnBeforeListenerRun  := OnServerBeforeListenerRun  ;
  fServer.OnBeforeBind         := OnServerBeforeBind      ;
  fServer.OnConnect            := OnServerConnect            ;
  fServer.OnDisconnect         := OnServerDisconnect         ;
  fServer.OnException          := OnServerException          ;
  fServer.OnListenException    := OnServerListenException    ;
  fServer.OnStatus             := OnServerStatus             ;
//  fLastStatus := nil;
//  fCurrStatus := nil;
end;

destructor TThServer.Destroy;
begin
  if Assigned(fServer) then FreeAndNil(fServer);

  inherited;
end;

procedure TThServer.Terminate;
begin
  if Assigned(fServer) then
    begin
      fServer.Active := false;
    end;


  inherited;
end;

procedure TThServer.Execute;
begin
  SetName;
  { Place thread code here }
  fServer.DefaultPort := fPort;
  fServer.Active := true;
  if not Assigned(fMemStream) then fMemStream := TMemoryStream.Create;
  if not Assigned(fBMP) then fBMP := TBitmap.Create;
  if not Assigned(fJPG) then fJPG := TJPEGImage.Create;

  while not terminated do
    begin
      sleep(500);
    end;
end;

end.
